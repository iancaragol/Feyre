version: '3.9'

services:
  # How to setup Traefik
  # https://www.youtube.com/watch?v=7N5O62FjGDc
  # https://dev.to/tiangolo/deploying-fastapi-and-other-apps-with-https-powered-by-traefik-5dik
  reverse-proxy:
    container_name: traefik-reverse-proxy
    image: traefik:v2.8
    env_file: 
      - ./src/traefik/traefik.env
    networks:
      - traefik-public
    command: 
      - --api=true
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --entrypoints.http.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.email=${LE_EMAIL}
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --accesslog
      - --log
    ports:
      - "80:80"
      - "443:443"
    restart: always
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-public-certificates:/certificates
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.traefik-dashboard-http.entrypoints=http
      - traefik.http.routers.traefik-dashboard-http.rule=Host(`traefik.feyre.io`)
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # traefik-https the actual router using HTTPS
      - traefik.http.routers.traefik-dashboard-https.entrypoints=https
      - traefik.http.routers.traefik-dashboard-https.rule=Host(`traefik.feyre.io`)
      - traefik.http.routers.traefik-dashboard-https.tls=true
      # Use the "le" (Let's Encrypt) resolver created below
      - traefik.http.routers.traefik-dashboard-https.tls.certresolver=le
      # Use the special Traefik service api@internal with the web UI/Dashboard
      - traefik.http.routers.traefik-dashboard-https.service=api@internal
      # https-redirect middleware to redirect HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # traefik-http set up only to use the middleware to redirect to https
      - traefik.http.routers.traefik-dashboard-http.middlewares=https-redirect
      # admin-auth middleware with HTTP Basic auth
      # Using the environment variables USERNAME and HASHED_PASSWORD
      - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME}:${HASHED_PASSWORD}
      # Enable HTTP Basic auth, using the middleware created above
      - traefik.http.routers.traefik-dashboard-https.middlewares=admin-auth

  # Frontend service
  frontend:
    container_name: frontend
    env_file: 
      - ./src/frontend/frontend.env
    restart: unless-stopped
    build: ./src/frontend
    command: index.js
    volumes:
      - log-volume:/home/app/logs

  # Backend Service
  backend:
    container_name: backend
    env_file: 
      - ./src/backend/backend.env
    restart: unless-stopped
    build: ./src/backend
    ports:
      - "5000:5000"
    volumes:
      - log-volume:/home/app/logs
    command: setup.py -s backend
    depends_on:
      - redis-primary
      - redis-secondary
      - datasync
      - frontend
  
  # Data sync service
  datasync:
    container_name: datasync
    env_file: 
      - ./src/backend/backend.env
    restart: unless-stopped
    build: ./src/backend
    ports:
      - "5001:5001"
    volumes:
      - log-volume:/home/app/logs
    command: setup.py -s sync
    depends_on:
      - redis-primary
      - redis-secondary

  # Public Stats Service
  public:
    container_name: public
    env_file: 
      - ./src/backend/backend.env
    restart: unless-stopped
    build: ./src/backend
    volumes:
      - log-volume:/home/app/logs
    command: setup.py -s public
    depends_on:
      - redis-primary
      - redis-secondary
      - datasync
      - frontend
    labels:
      # Enable Traefik for this specific "backend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.app.loadbalancer.server.port=5002
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.app-http.entrypoints=http
      - traefik.http.routers.app-http.rule=Host(`api.feyre.io`)
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Make Traefik use this domain in HTTPS
      - traefik.http.routers.app-https.entrypoints=https
      - traefik.http.routers.app-https.rule=Host(`api.feyre.io`)
      - traefik.http.routers.app-https.tls=true
      # Use the "le" (Let's Encrypt) resolver
      - traefik.http.routers.app-https.tls.certresolver=le
      # https-redirect middleware to redirect HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Middleware to redirect HTTP to HTTPS
      - traefik.http.routers.app-http.middlewares=https-redirect
      - traefik.http.routers.app-https.middlewares=admin-auth
    networks:
      - traefik-public

  # Primary redis
  redis-primary:
    container_name: redis-primary
    image: docker.io/bitnami/redis:6.2
    restart: unless-stopped
    ports:
      - '6379'
    env_file: 
      - ./src/backend/redis-primary.env
    volumes:
      - 'redis_data:/bitnami/redis/data'

  # Secondary Redis
  redis-secondary:
    container_name: redis-secondary
    image: docker.io/bitnami/redis:6.2
    restart: unless-stopped
    ports:
      - '6379'
    depends_on:
      - redis-primary
    env_file: 
      - ./src/backend/redis-secondary.env

  # Prometheus
  # Prometheus config.yml is configured to point to Grafana Cloud
  prometheus:
    container_name: prometheus
    build: ./src/prometheus
    restart: unless-stopped
    env_file: 
      - ./src/prometheus/prometheus.env
    volumes:
      - ./src/prometheus/config.yml:/etc/prometheus/config.yml
    ports:
      - 9090:9090

  # Promtail is used to send our logs to Grafana cloud
  # Promtail config.yml is configured to point to Grafana Cloud Loki instance
  promtail:
    container_name: promtail
    image: grafana/promtail:2.4.2
    volumes:
      - ./src/promtail/config.yml:/etc/promtail/config.yml
      - log-volume:/home/app/logs
    command: -config.file=/etc/promtail/config.yml -config.expand-env=true
    env_file:
      - ./src/promtail/promtail.env

  # Grafana for visualization
  # Commented out because we are using Grafana Cloud instead
  #grafana:
  #  container_name: grafana
  #  image: grafana/grafana:5.1.0
  #  volumes:
  #    - ./src/grafana/config.ini:/etc/grafana/grafana.ini
  #    - ./src/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/default.yaml
  #    - ./src/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/default.yaml
  #    - ./src/grafana/dashboards:/var/lib/grafana/dashboards
  #  ports:
  #    - 3000:3000

volumes:
  redis_data:
    driver: local
  traefik-public-certificates:
    driver: local
  log-volume:
  
networks:
  traefik-public:
    external: true