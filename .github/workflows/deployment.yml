name: deployment

on:
  push:
    branches:
      - master
  pull_request:

jobs:

  changes:
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.filter.outputs.src }}
      terraform-k8s-cluster: ${{ steps.filter.outputs.terraform-k8s-cluster }}
      terraform-k8s: ${{ steps.filter.outputs.terraform-k8s }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          src:
            - 'src/**'
          terraform-k8s-cluster:
            - 'terraform/k8s-cluster/**'
          terraform-k8s:
            - 'terraform/k8s/**'

  test:

      needs: changes
      if: needs.changes.outputs.src == 'true' || needs.changes.outputs.terraform-k8s == 'true' || needs.changes.outputs.terraform-k8s-cluster == 'true'

      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: actions/cache@v2
        id: cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: src/backend
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "cache miss - installing dependencies"
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: python vuln check
        working-directory: src/backend
        run: |
          pip install safety
          safety check

  build:

    needs: [changes, test]
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.terraform-k8s == 'true' || needs.changes.outputs.terraform-k8s-cluster == 'true'

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.DEV_AZURE_CREDENTIALS }}
      - name: 'ACR Login'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.DEV_REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.DEV_REGISTRY_USERNAME }}
          password: ${{ secrets.DEV_REGISTRY_PASSWORD }}

      # In this step, this action saves a list of existing images,
      # the cache is created without them in the post run.
      # It also restores the cache if it exists.
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
      
      # This job just ensures the images are built properly. In the future it will ensure they run properly as well
      - name: 'Build image - dev'
        if: github.event_name == 'pull_request'
        working-directory: src
        run: |
          docker build -t ${{ secrets.DEV_REGISTRY_LOGIN_SERVER }}/frontend:dev frontend
          docker build -t ${{ secrets.DEV_REGISTRY_LOGIN_SERVER }}/backend:dev backend
          docker push ${{ secrets.DEV_REGISTRY_LOGIN_SERVER }}/frontend:dev
          docker push ${{ secrets.DEV_REGISTRY_LOGIN_SERVER }}/backend:dev

      - name: 'Build and Push image - latest'
        if: github.event_name == 'push'
        working-directory: src
        run: |
          docker build -t ${{ secrets.DEV_REGISTRY_LOGIN_SERVER }}/frontend:latest frontend
          docker push ${{ secrets.DEV_REGISTRY_LOGIN_SERVER }}/frontend:latest
          docker build -t ${{ secrets.DEV_REGISTRY_LOGIN_SERVER }}/backend:latest backend
          docker push ${{ secrets.DEV_REGISTRY_LOGIN_SERVER }}/backend:latest

  terraform-plan-development:
    needs: [changes, build]
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.terraform-k8s == 'true' || needs.changes.outputs.terraform-k8s-cluster == 'true'

    runs-on: ubuntu-latest

    steps:
      # Setup
      - uses: actions/checkout@v2

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.DEV_AZURE_CREDENTIALS }}

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform version
        run: terraform --version

      - uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.DEV_KUBE_CONFIG }}
        id: setcontext

      # Terraform k8s-cluster

      - name: Terraform fmt (k8s-cluster)
        working-directory: terraform/k8s-cluster
        id: fmt_k8s_cluster
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform init (k8s-cluster)
        working-directory: terraform/k8s-cluster
        id: init_k8s_cluster
        run: terraform init

      - name: Terraform validate (k8s-cluster)
        working-directory: terraform/k8s-cluster
        id: validate_k8s_cluster
        run: terraform validate -no-color

      - name: Terraform plan (k8s-cluster)
        if: github.event_name == 'pull_request'
        working-directory: terraform/k8s-cluster
        id: plan_k8s_cluster
        env:
          TF_LOG: TRACE # troubleshooting
          TF_VAR_ENVIRONMENT: dev
          # Azure Auth
          TF_VAR_CLIENT_ID: ${{ secrets.DEV_CLIENT_ID }}
          TF_VAR_CLIENT_SECRET: ${{ secrets.DEV_CLIENT_SECRET }}
          TF_VAR_SUBSCRIPTION_ID: ${{ secrets.DEV_SUBSCRIPTION_ID }}
          TF_VAR_TENANT_ID: ${{ secrets.DEV_TENANT_ID }}
        run: terraform plan -no-color
        continue-on-error: true

        # Terraform k8s (resources / workloads)

      - name: Terraform fmt (k8s)
        working-directory: terraform/k8s
        id: fmt_k8s
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform init (k8s)
        working-directory: terraform/k8s
        id: init_k8s
        run: terraform init

      - name: Terraform validate (k8s)
        working-directory: terraform/k8s
        id: validate_k8s
        run: terraform validate -no-color

      - name: Terraform plan (k8s)
        if: github.event_name == 'pull_request'
        working-directory: terraform/k8s
        id: plan_k8s
        env:
          # Config
          TF_VAR_IMAGE_TAG: dev
          TF_VAR_ENVIRONMENT: dev
          # Creds
          TF_VAR_DISCORD_TOKEN: ${{ secrets.DEV_DISCORD_TOKEN }}
          # Azure Auth
          TF_VAR_CLIENT_ID: ${{ secrets.DEV_CLIENT_ID }}
          TF_VAR_CLIENT_SECRET: ${{ secrets.DEV_CLIENT_SECRET }}
          TF_VAR_SUBSCRIPTION_ID: ${{ secrets.DEV_SUBSCRIPTION_ID }}
          TF_VAR_TENANT_ID: ${{ secrets.DEV_TENANT_ID }}
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN_K8S_CLUSTER: "terraform\n${{ steps.plan_k8s_cluster.outputs.stdout }}"
          PLAN_K8S: "terraform\n${{ steps.plan_k8s.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `## Terraform Plan - \`k8s-cluster\` - Development ü™ê
            - Terraform Format and Style üñå: \`${{ steps.fmt_k8s_cluster.outcome }}\`
            - Terraform Initialization ‚öôÔ∏è: \`${{ steps.init_k8s_cluster.outcome }}\`
            - Terraform Validation ü§ñ: \`${{ steps.validate_k8s_cluster.outcome }}\`
            - Terraform Plan üìñ: \`${{ steps.plan_k8s_cluster.outcome }}\`
            
            <details><summary><b>Show Plan</b></summary>
            
            \`\`\`${process.env.PLAN_K8S_CLUSTER}\`\`\`
            
            </details>
            
            > Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`terraform/k8s-cluster\`, Workflow: \`${{ github.workflow }}\`
            
            ## Terraform Plan - \`k8s\` - Development ü™ê
            - Terraform Format and Style üñå: \`${{ steps.fmt_k8s.outcome }}\`
            - Terraform Initialization ‚öôÔ∏è: \`${{ steps.init_k8s.outcome }}\`
            - Terraform Validation ü§ñ: \`${{ steps.validate_k8s.outcome }}\`
            - Terraform Plan üìñ: \`${{ steps.plan_k8s.outcome }}\`
            
            <details><summary><b>Show Plan</b></summary>
            
            \`\`\`${process.env.PLAN_K8S}\`\`\`
            
            </details>
            
            > Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`terraform/k8s\`, Workflow: \`${{ github.workflow }}\``;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply-development:
    environment: development

    needs: [changes, build, terraform-plan-development]
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.terraform-k8s == 'true' || needs.changes.outputs.terraform-k8s-cluster == 'true'

    runs-on: ubuntu-latest

    steps:

      # Setup
      - uses: actions/checkout@v2

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.DEV_AZURE_CREDENTIALS }}

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform version
        run: terraform --version

      - uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.DEV_KUBE_CONFIG }}
        id: setcontext
      
      # Apply (k8s-cluster)

      - name: Terraform init (k8s-cluster)
        working-directory: terraform/k8s-cluster
        id: init_k8s_cluster
        run: terraform init

      - name: Terraform apply (k8s-cluster)
        if: github.event_name == 'pull_request'
        working-directory: terraform/k8s-cluster
        env:
          TF_VAR_ENVIRONMENT: dev
          # Azure Auth
          TF_VAR_CLIENT_ID: ${{ secrets.DEV_CLIENT_ID }}
          TF_VAR_CLIENT_SECRET: ${{ secrets.DEV_CLIENT_SECRET }}
          TF_VAR_SUBSCRIPTION_ID: ${{ secrets.DEV_SUBSCRIPTION_ID }}
          TF_VAR_TENANT_ID: ${{ secrets.DEV_TENANT_ID }}
        run: terraform apply -auto-approve

      # Apply (k8s)

      - name: Terraform init (k8s)
        working-directory: terraform/k8s
        id: init_k8s
        run: terraform init

      - name: Terraform apply (k8s)
        if: github.event_name == 'pull_request'
        working-directory: terraform/k8s
        env:
          # Config
          TF_VAR_ENVIRONMENT: dev
          TF_VAR_IMAGE_TAG: dev
          # Creds
          TF_VAR_DISCORD_TOKEN: ${{ secrets.DEV_DISCORD_TOKEN }}
          # Azure Auth
          TF_VAR_CLIENT_ID: ${{ secrets.DEV_CLIENT_ID }}
          TF_VAR_CLIENT_SECRET: ${{ secrets.DEV_CLIENT_SECRET }}
          TF_VAR_SUBSCRIPTION_ID: ${{ secrets.DEV_SUBSCRIPTION_ID }}
          TF_VAR_TENANT_ID: ${{ secrets.DEV_TENANT_ID }}
        run: terraform apply -auto-approve

      # Add me later to get Discord push notifications on deployment! üòä
      # - name: Discord notification
      #   if: github.event_name == 'push'
      #   env:
      #     DISCORD_WEBHOOK: ${{ secrets.DEV_DISCORD_WEBHOOK_DEPLOYMENT }}
      #   uses: Ilshidur/action-discord@0.3.2
      #   with:
      #     args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been deployed to production üöÄ'
